# - name: Update IP Settings
# #   ansible.windows.win_shell: |
# #     # Define parameters
# #     $ipConfigurationType = "{{ item.ip_configuration_type }}"
# #     $ipAddress = "{{ item.ip_address }}"
# #     $prefixLength = "{{ item.subnet_prefix }}"
# #     $defaultGateway = "{{ item.default_gateway }}"
# #     $dns1 = "{{ item.preferred_dns }}"
# #     $dns2 = "{{ item.alternative_dns }}"

# #     function Get-SubnetMask {
# #         param (
# #             [int]$PrefixLength
# #         )

# #         # Create the binary subnet mask based on the prefix length
# #         $binary = '1' * $PrefixLength + '0' * (32 - $PrefixLength)

# #         # Split the binary string into 4 octets
# #         $octets = @()
# #         for ($i = 0; $i -lt 4; $i++) {
# #             $octet = $binary.Substring($i * 8, 8)
# #             $octets += [Convert]::ToByte($octet, 2)
# #         }

# #         # Join the octets into a dotted-decimal string
# #         return "$($octets[0]).$($octets[1]).$($octets[2]).$($octets[3])"
# #     }

# #     # Function to get the primary network adapter name
# #     function Get-PrimaryNetworkAdapter {
# #         $interfaces = netsh interface show interface
# #         foreach ($line in $interfaces) {
# #             if ($line -match "Connected") {
# #                 $interfaceName = $line -split '\s{2,}' | Select-Object -Last 1
# #                 return $interfaceName.Trim()
# #             }
# #         }
# #         return $null
# #     }

# #     # Get the primary network adapter name
# #     $adapterName = Get-PrimaryNetworkAdapter

# #     if ($adapterName) {
# #         # Debug output
# #         Write-Output "Using Network Adapter: $adapterName"
# #         Write-Output "IP Configuration Type: $ipConfigurationType"
# #         Write-Output "IP Address: $ipAddress"
# #         Write-Output "Subnet Prefix: $prefixLength"
# #         Write-Output "Default Gateway: $defaultGateway"
# #         Write-Output "DNS1: $dns1"
# #         Write-Output "DNS2: $dns2"

# #         if ($ipConfigurationType -eq 'static') {
# #             # Convert prefix length to subnet mask
# #             $subnetMask = Get-SubnetMask -PrefixLength $prefixLength

# #             # Disable DHCP and set static IP
# #             netsh interface ip set address name="$adapterName" static $ipAddress $subnetMask $defaultGateway
# #             Write-Output "Static IP address set successfully on '$adapterName'."

# #             # Set DNS servers
# #             netsh interface ip set dns name="$adapterName" static $dns1 primary
# #             if ($dns2) {
# #                 netsh interface ip add dns name="$adapterName" $dns2 index=2
# #             }
# #             Write-Output "DNS servers set successfully on '$adapterName'."
# #         } elseif ($ipConfigurationType -eq 'dynamic') {
# #             # Enable DHCP
# #             netsh interface ip set address name="$adapterName" dhcp
# #             netsh interface ip set dns name="$adapterName" dhcp
# #             Write-Output "DHCP enabled and DNS settings cleared on '$adapterName'."
# #         }
# #     } else {
# #         Write-Error "No suitable network adapter found."
# #     }
# #   loop: "{{ vm_settings }}"
# #   loop_control:
# #     label: "{{ item.hostname | default('unknown') }}"
# #   when: item.ip_configuration_type is defined and item.ip_address is defined




##################################
# - name: Update IP address
#   ansible.windows.win_shell: |
#     # Define parameters
#     $ipConfigurationType = "{{ item.ip_configuration_type }}"
#     $ipAddress = "{{ item.ip_address }}"
#     $prefixLength = "{{ item.subnet_prefix }}"
#     $defaultGateway = "{{ item.default_gateway }}"
#     $dns1 = "{{ item.preferred_dns }}"
#     $dns2 = "{{ item.alternative_dns }}"

#     function Get-SubnetMask {
#         param (
#             [int]$PrefixLength
#         )

#         $binary = '1' * $PrefixLength + '0' * (32 - $PrefixLength)
#         $octets = @()
#         for ($i = 0; $i -lt 4; $i++) {
#             $octet = $binary.Substring($i * 8, 8)
#             $octets += [Convert]::ToByte($octet, 2)
#         }
#         return "$($octets[0]).$($octets[1]).$($octets[2]).$($octets[3])"
#     }

#     function Get-PrimaryNetworkAdapter {
#         $interfaces = netsh interface show interface
#         foreach ($line in $interfaces) {
#             if ($line -match "Connected") {
#                 $interfaceName = $line -split '\s{2,}' | Select-Object -Last 1
#                 return $interfaceName.Trim()
#             }
#         }
#         return $null
#     }

#     function Get-CurrentIPConfiguration {
#         param (
#             [string]$AdapterName
#         )
#         $config = netsh interface ip show config name="$AdapterName"
#         $ipInfo = [PSCustomObject]@{}
#         foreach ($line in $config) {
#             if ($line -match "IP Address") {
#                 $ipInfo.IPAddress = ($line -split ':')[1].Trim()
#             } elseif ($line -match "Subnet Mask") {
#                 $ipInfo.SubnetMask = ($line -split ':')[1].Trim()
#             } elseif ($line -match "Default Gateway") {
#                 $ipInfo.DefaultGateway = ($line -split ':')[1].Trim()
#             }
#         }
#         return $ipInfo
#     }

#     # Get the primary network adapter name
#     $adapterName = Get-PrimaryNetworkAdapter

#     if ($adapterName) {
#         # Debug output
#         Write-Output "Using Network Adapter: $adapterName"
#         Write-Output "IP Configuration Type: $ipConfigurationType"
#         Write-Output "IP Address: $ipAddress"
#         Write-Output "Subnet Prefix: $prefixLength"
#         Write-Output "Default Gateway: $defaultGateway"
#         Write-Output "DNS1: $dns1"
#         Write-Output "DNS2: $dns2"

#         $currentConfig = Get-CurrentIPConfiguration -AdapterName $adapterName
#         $subnetMask = Get-SubnetMask -PrefixLength $prefixLength

#         # Check if current settings match the desired settings
#         $needsUpdate = $false
#         if ($ipConfigurationType -eq 'static') {
#             if ($currentConfig.IPAddress -ne $ipAddress -or
#                 $currentConfig.SubnetMask -ne $subnetMask -or
#                 $currentConfig.DefaultGateway -ne $defaultGateway) {
#                 $needsUpdate = $true
#             }

#             if ($needsUpdate) {
#                 # Apply static IP settings
#                 netsh interface ip set address name="$adapterName" static $ipAddress $subnetMask $defaultGateway
#                 Write-Output "Static IP address set successfully on '$adapterName'."
#                 netsh interface ip set dns name="$adapterName" static $dns1 primary
#                 if ($dns2) {
#                     netsh interface ip add dns name="$adapterName" $dns2 index=2
#                 }
#                 Write-Output "DNS servers set successfully on '$adapterName'."
#             } else {
#                 Write-Output "IP configuration for '$adapterName' is already up-to-date."
#             }
#         } elseif ($ipConfigurationType -eq 'dynamic') {
#             if ($currentConfig.IPAddress -ne $null) {
#                 $needsUpdate = $true
#             }

#             if ($needsUpdate) {
#                 # Enable DHCP
#                 netsh interface ip set address name="$adapterName" dhcp
#                 netsh interface ip set dns name="$adapterName" dhcp
#                 Write-Output "DHCP enabled and DNS settings cleared on '$adapterName'."
#             } else {
#                 Write-Output "DHCP is already enabled on '$adapterName'."
#             }
#         }
#     } else {
#         Write-Error "No suitable network adapter found."
#     }
#   loop: "{{ vm_settings }}"
#   loop_control:
#     label: "{{ item.hostname | default('unknown') }}"
#   when: item.ip_configuration_type is defined and item.ip_address is defined



##############################TEST
# win_update_ip/tasks/main.yml

# - name: Update IP address settings
#   ansible.windows.win_shell: |
#     # Define parameters
#     $ipConfigurationType = "{{ item.ip_configuration_type }}"
#     $ipAddress = "{{ item.ip_address }}"
#     $prefixLength = "{{ item.subnet_prefix }}"
#     $defaultGateway = "{{ item.default_gateway }}"
#     $dns1 = "{{ item.preferred_dns }}"
#     $dns2 = "{{ item.alternative_dns }}"

#     function Get-SubnetMask {
#         param (
#             [int]$PrefixLength
#         )

#         $binary = '1' * $PrefixLength + '0' * (32 - $PrefixLength)
#         $octets = @()
#         for ($i = 0; $i -lt 4; $i++) {
#             $octet = $binary.Substring($i * 8, 8)
#             $octets += [Convert]::ToByte($octet, 2)
#         }
#         return "$($octets[0]).$($octets[1]).$($octets[2]).$($octets[3])"
#     }

#     function Get-PrimaryNetworkAdapter {
#         $interfaces = netsh interface show interface
#         foreach ($line in $interfaces) {
#             if ($line -match "Connected") {
#                 $interfaceName = $line -split '\s{2,}' | Select-Object -Last 1
#                 return $interfaceName.Trim()
#             }
#         }
#         return $null
#     }

#     function Get-CurrentIPConfiguration {
#         param (
#             [string]$AdapterName
#         )
#         $config = netsh interface ip show config name="$AdapterName"
#         $ipInfo = @{
#             IPAddress = $null
#             SubnetMask = $null
#             DefaultGateway = $null
#         }
#         foreach ($line in $config) {
#             if ($line -match "IP Address") {
#                 $ipInfo.IPAddress = ($line -split ':')[1].Trim()
#             } elseif ($line -match "Subnet Mask") {
#                 $ipInfo.SubnetMask = ($line -split ':')[1].Trim()
#             } elseif ($line -match "Default Gateway") {
#                 $ipInfo.DefaultGateway = ($line -split ':')[1].Trim()
#             }
#         }
#         return $ipInfo
#     }

#     $adapterName = Get-PrimaryNetworkAdapter

#     if ($adapterName) {
#         Write-Output "Using Network Adapter: $adapterName"
#         Write-Output "IP Configuration Type: $ipConfigurationType"
#         Write-Output "IP Address: $ipAddress"
#         Write-Output "Subnet Prefix: $prefixLength"
#         Write-Output "Default Gateway: $defaultGateway"
#         Write-Output "DNS1: $dns1"
#         Write-Output "DNS2: $dns2"

#         $currentConfig = Get-CurrentIPConfiguration -AdapterName $adapterName
#         $subnetMask = Get-SubnetMask -PrefixLength $prefixLength

#         $needsUpdate = $false
#         if ($ipConfigurationType -eq 'static') {
#             if ($currentConfig.IPAddress -ne $ipAddress -or
#                 $currentConfig.SubnetMask -ne $subnetMask -or
#                 $currentConfig.DefaultGateway -ne $defaultGateway) {
#                 $needsUpdate = $true
#             }

#             if ($needsUpdate) {
#                 netsh interface ip set address name="$adapterName" static $ipAddress $subnetMask $defaultGateway
#                 Write-Output "Static IP address set successfully on '$adapterName'."
#                 netsh interface ip set dns name="$adapterName" static $dns1 primary
#                 if ($dns2) {
#                     netsh interface ip add dns name="$adapterName" $dns2 index=2
#                 }
#                 Write-Output "DNS servers set successfully on '$adapterName'."
#             } else {
#                 Write-Output "IP configuration for '$adapterName' is already up-to-date."
#             }
#         } elseif ($ipConfigurationType -eq 'dynamic') {
#             if ($currentConfig.IPAddress -ne $null) {
#                 $needsUpdate = $true
#             }

#             if ($needsUpdate) {
#                 netsh interface ip set address name="$adapterName" dhcp
#                 netsh interface ip set dns name="$adapterName" dhcp
#                 Write-Output "DHCP enabled and DNS settings cleared on '$adapterName'."
#             } else {
#                 Write-Output "DHCP is already enabled on '$adapterName'."
#             }
#         }
#     } else {
#         Write-Error "No suitable network adapter found."
#     }
#   loop: "{{ vm_settings }}"
#   loop_control:
#     label: "{{ item.hostname | default('unknown') }}"
#   when: item.ip_configuration_type is defined














# ###########ANOTHER TEST
# - name: Update IP address settings
#   ansible.windows.win_shell: |
#     # Define parameters
#     $ipConfigurationType = "{{ item.ip_configuration_type }}"
#     $ipAddress = "{{ item.ip_address }}"
#     $prefixLength = "{{ item.subnet_prefix }}"
#     $defaultGateway = "{{ item.default_gateway }}"
#     $dns1 = "{{ item.preferred_dns }}"
#     $dns2 = "{{ item.alternative_dns }}"

#     function Get-SubnetMask {
#         param (
#             [int]$PrefixLength
#         )
#         $binary = '1' * $PrefixLength + '0' * (32 - $PrefixLength)
#         $octets = @()
#         for ($i = 0; $i -lt 4; $i++) {
#             $octet = $binary.Substring($i * 8, 8)
#             $octets += [Convert]::ToByte($octet, 2)
#         }
#         return "$($octets[0]).$($octets[1]).$($octets[2]).$($octets[3])"
#     }

#     function Get-PrimaryNetworkAdapter {
#         $interfaces = netsh interface show interface
#         foreach ($line in $interfaces) {
#             if ($line -match "Connected") {
#                 $interfaceName = $line -split '\s{2,}' | Select-Object -Last 1
#                 return $interfaceName.Trim()
#             }
#         }
#         return $null
#     }

#     function Get-CurrentIPConfiguration {
#         param (
#             [string]$AdapterName
#         )
#         $config = netsh interface ip show config name="$AdapterName"
#         $ipInfo = @{
#             IPAddress = $null
#             SubnetMask = $null
#             DefaultGateway = $null
#         }
#         foreach ($line in $config) {
#             if ($line -match "IP Address") {
#                 $ipInfo.IPAddress = ($line -split ':')[1].Trim()
#             } elseif ($line -match "Subnet Mask") {
#                 $ipInfo.SubnetMask = ($line -split ':')[1].Trim()
#             } elseif ($line -match "Default Gateway") {
#                 $ipInfo.DefaultGateway = ($line -split ':')[1].Trim()
#             }
#         }
#         return $ipInfo
#     }

#     $adapterName = Get-PrimaryNetworkAdapter

#     if ($adapterName) {
#         Write-Output "Using Network Adapter: $adapterName"
#         Write-Output "IP Configuration Type: $ipConfigurationType"
#         Write-Output "IP Address: $ipAddress"
#         Write-Output "Subnet Prefix: $prefixLength"
#         Write-Output "Default Gateway: $defaultGateway"
#         Write-Output "DNS1: $dns1"
#         Write-Output "DNS2: $dns2"

#         $currentConfig = Get-CurrentIPConfiguration -AdapterName $adapterName
#         $subnetMask = Get-SubnetMask -PrefixLength $prefixLength

#         $needsUpdate = $false
#         if ($ipConfigurationType -eq 'static') {
#             if ($currentConfig.IPAddress -ne $ipAddress -or
#                 $currentConfig.SubnetMask -ne $subnetMask -or
#                 $currentConfig.DefaultGateway -ne $defaultGateway) {
#                 $needsUpdate = $true
#             }

#             if ($needsUpdate) {
#                 netsh interface ip set address name="$adapterName" static $ipAddress $subnetMask $defaultGateway
#                 Write-Output "Static IP address set successfully on '$adapterName'."
#                 netsh interface ip set dns name="$adapterName" static $dns1 primary
#                 if ($dns2) {
#                     netsh interface ip add dns name="$adapterName" $dns2 index=2
#                 }
#                 Write-Output "DNS servers set successfully on '$adapterName'."
#             } else {
#                 Write-Output "IP configuration for '$adapterName' is already up-to-date."
#             }
#         } elseif ($ipConfigurationType -eq 'dynamic') {
#             if ($currentConfig.IPAddress -ne $null) {
#                 $needsUpdate = $true
#             }

#             if ($needsUpdate) {
#                 netsh interface ip set address name="$adapterName" dhcp
#                 netsh interface ip set dns name="$adapterName" dhcp
#                 Write-Output "DHCP enabled and DNS settings cleared on '$adapterName'."
#             } else {
#                 Write-Output "DHCP is already enabled on '$adapterName'."
#             }
#         }
#     } else {
#         Write-Error "No suitable network adapter found."
#     }

#   loop: "{{ vm_settings }}"
#   loop_control:
#     label: "{{ item.hostname | default('unknown') }}"
#   when: item.ip_configuration_type is defined



####DNS enabled or not
- name: Update IP address settings
  ansible.windows.win_shell: |
    # Define parameters
    $ipConfigurationType = "{{ item.ip_configuration_type }}"
    $ipAddress = "{{ item.ip_address }}"
    $prefixLength = "{{ item.subnet_prefix }}"
    $defaultGateway = "{{ item.default_gateway }}"
    $dns1 = "{{ item.preferred_dns }}"
    $dns2 = "{{ item.alternative_dns }}"

    function Get-SubnetMask {
        param (
            [int]$PrefixLength
        )
        $binary = '1' * $PrefixLength + '0' * (32 - $PrefixLength)
        $octets = @()
        for ($i = 0; $i -lt 4; $i++) {
            $octet = $binary.Substring($i * 8, 8)
            $octets += [Convert]::ToByte($octet, 2)
        }
        return "$($octets[0]).$($octets[1]).$($octets[2]).$($octets[3])"
    }

    function Get-PrimaryNetworkAdapter {
        $interfaces = netsh interface show interface
        foreach ($line in $interfaces) {
            if ($line -match "Connected") {
                $interfaceName = $line -split '\s{2,}' | Select-Object -Last 1
                return $interfaceName.Trim()
            }
        }
        return $null
    }

    function Get-CurrentIPConfiguration {
        param (
            [string]$AdapterName
        )
        $config = netsh interface ip show config name="$AdapterName"
        $ipInfo = @{
            IPAddress = $null
            SubnetMask = $null
            DefaultGateway = $null
        }
        foreach ($line in $config) {
            if ($line -match "IP Address") {
                $ipInfo.IPAddress = ($line -split ':')[1].Trim()
            } elseif ($line -match "Subnet Mask") {
                $ipInfo.SubnetMask = ($line -split ':')[1].Trim()
            } elseif ($line -match "Default Gateway") {
                $ipInfo.DefaultGateway = ($line -split ':')[1].Trim()
            }
        }
        return $ipInfo
    }

    $adapterName = Get-PrimaryNetworkAdapter

    if ($adapterName) {
        Write-Output "Using Network Adapter: $adapterName"
        Write-Output "IP Configuration Type: $ipConfigurationType"
        Write-Output "IP Address: $ipAddress"
        Write-Output "Subnet Prefix: $prefixLength"
        Write-Output "Default Gateway: $defaultGateway"
        Write-Output "DNS1: $dns1"
        Write-Output "DNS2: $dns2"

        $currentConfig = Get-CurrentIPConfiguration -AdapterName $adapterName
        $subnetMask = Get-SubnetMask -PrefixLength $prefixLength

        $needsUpdate = $false
        if ($ipConfigurationType -eq 'static') {
            if ($currentConfig.IPAddress -ne $ipAddress -or
                $currentConfig.SubnetMask -ne $subnetMask -or
                $currentConfig.DefaultGateway -ne $defaultGateway) {
                $needsUpdate = $true
            }

            if ($needsUpdate) {
                netsh interface ip set address name="$adapterName" static $ipAddress $subnetMask $defaultGateway
                Write-Output "Static IP address set successfully on '$adapterName'."
                netsh interface ip set dns name="$adapterName" static $dns1
                if ($dns2) {
                    netsh interface ip add dns name="$adapterName" $dns2 index=2
                }
                Write-Output "DNS servers set successfully on '$adapterName'."
            } else {
                Write-Output "IP configuration for '$adapterName' is already up-to-date."
            }
        } elseif ($ipConfigurationType -eq 'dynamic') {
            if ($currentConfig.IPAddress -ne $null) {
                $needsUpdate = $true
            }

            if ($needsUpdate) {
                # Clear all existing DNS settings before applying DHCP
                netsh interface ip set dns name="$adapterName" dhcp
                Write-Output "DHCP enabled and DNS settings cleared on '$adapterName'."
                
                # Apply new DNS settings if provided
                if ($dns1) {
                    netsh interface ip add dns name="$adapterName" $dns1 index=1
                }
                if ($dns2) {
                    netsh interface ip add dns name="$adapterName" $dns2 index=2
                }
            } else {
                Write-Output "DHCP is already enabled on '$adapterName'."
            }
        }
    } else {
        Write-Error "No suitable network adapter found."
    }

  loop: "{{ vm_settings }}"
  loop_control:
    label: "{{ item.hostname | default('unknown') }}"
  when: item.ip_configuration_type is defined

---
- name: Update Windows OS Configuration
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Read the CSV file from the control machine
      ansible.builtin.slurp:
        src: files/vm_settings.csv
      register: slurped_csv

    - name: Decode and convert CSV content to JSON
      set_fact:
        csv_content: "{{ slurped_csv.content | b64decode }}"

    - name: Convert CSV to JSON using PowerShell
      ansible.windows.win_shell: |
        $csvContent = "{{ csv_content }}"
        $csvContent | ConvertFrom-Csv | ConvertTo-Json
      register: json_data

    - name: Apply Network Configuration
      ansible.windows.win_shell: |
        $config = $using:json_data | ConvertFrom-Json
        foreach ($entry in $config) {
          $interface = Get-NetAdapter | Where-Object { $_.Name -eq $entry.hostname }
          if ($entry.ip_configuration_type -eq "static") {
            New-NetIPAddress -InterfaceAlias $interface.Name -IPAddress $entry.ip_address -PrefixLength $entry.subnet_prefix -DefaultGateway $entry.default_gateway
            Set-DnsClientServerAddress -InterfaceAlias $interface.Name -ServerAddresses ($entry.preferred_dns, $entry.alternative_dns)
          } elseif ($entry.ip_configuration_type -eq "dynamic") {
            Set-NetIPInterface -InterfaceAlias $interface.Name -Dhcp Enabled
            Set-DnsClientServerAddress -InterfaceAlias $interface.Name -ResetServerAddresses
          }
        }
      ignore_errors: yes

    - name: Manage Domain Membership
      ansible.windows.win_shell: |
        $config = $using:json_data | ConvertFrom-Json
        foreach ($entry in $config) {
          if ($entry.domain) {
            Add-Computer -DomainName $entry.domain -Credential (New-Object PSCredential("{{ domain_user }}", (ConvertTo-SecureString "{{ domain_password }}" -AsPlainText -Force))) -Restart
          }
        }
      when: "'domain' in item"
      with_items: "{{ json_data | from_json }}"

    - name: Manage Workgroup Membership
      ansible.windows.win_shell: |
        $config = $using:json_data | ConvertFrom-Json
        foreach ($entry in $config) {
          if ($entry.workgroup) {
            Add-Computer -WorkGroupName $entry.workgroup -Restart
          }
        }
      when: "'workgroup' in item"
      with_items: "{{ json_data | from_json }}"
